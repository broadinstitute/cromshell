#! /bin/bash

This=`basename $0`
BinDir=`dirname $0`

# FIXME: read env var, or default with this
export CROMWELL_URL="https://cromwell-v30.dsde-methods.broadinstitute.org"


CROMSHELL_CONFIG=$HOME/.cromshell
mkdir -p $CROMSHELL_CONFIG

CROMWELL_METADATA_PARAMETERS="excludeKey=submittedFiles"
CROMWELL_LAST_WORKFLOW_FILE="${CROMSHELL_CONFIG}/last.workfow.id"
CROMWELL_DIARY_WORKFLOW_FILE="${CROMSHELL_CONFIG}/all.workfow.ids"
instruct()  # {{{
{
   echo
   echo "Pokes Cromwell REST Endpoints at a server specified by the shell var CROMWELL_URL" 
   echo
   echo "Usage:    $This <subcommand> [options]"
   echo
   echo "NOTE: As a convenience, if you omit a workflow-id from a command, the last used workflow-id "
   echo "will be used as a default.  When submitting a workflow, the returned worfklow-id "
   echo "will become the last used workflow id. Also, you can use -n instead of a workflow-id to "
   echo "use a previous run (status -1 would be the status of the last run, -2 would be the one before that.)"
   echo
   echo "Supported Subcommands:"
   echo "   submit [wdl-file] [inputs] [options] [dependencies]"
   echo "   status [worfklow-id]"
   echo "   logs [workflow-id]"
   echo "   metadata [worfklow-id]"
   echo "   executionStatusCount [worfklow-id]"
   echo "   slim_metadata [worfklow-id]"
   echo "   timing [worfklow-id]"
   echo "   abort [worfklow-id]"
   echo
   echo
   eval $1
}  # }}}

function submit() { 
  response=$(curl -s -F workflowSource=@${1}  ${2:+ -F workflowInputs=@${2}} ${3:+ -F workflowOptions=@${3}} ${4:+ -F workflowDependencies=@${4}} ${CROMWELL_URL}/api/workflows/v1)
  echo $response  
  id=$(echo $response | cut -d"," -f1 | cut -d":" -f2 | sed s/\"//g | sed s/\ //g)
  mkdir $id
  cp ${1} ${2} ${3} ${4} ${id}/
  echo $id > $CROMWELL_LAST_WORKFLOW_FILE
  echo $id >> $CROMWELL_DIARY_WORKFLOW_FILE
}
function status() {
  curl -s ${CROMWELL_URL}/api/workflows/v1/${1}/status | jq . ;
}

function logs() {
  curl -s ${CROMWELL_URL}/api/workflows/v1/${1}/logs | jq . ;
}

function metadata() {
  curl --compressed -s ${CROMWELL_URL}/api/workflows/v1/${1}/metadata?${CROMWELL_METADATA_PARAMETERS} | jq . ;
}

function executionStatusCount() {
  curl --compressed -s ${CROMWELL_URL}/api/workflows/v1/$1/metadata?${CROMWELL_METADATA_PARAMETERS} |
  jq '.calls | to_entries | map({(.key): .value | flatten | group_by(.executionStatus) | map({(.[0].executionStatus): . | length}) | add})'
}

function slim_metadata() {
  curl --compressed -s "${CROMWELL_URL}/api/workflows/v1/$1/metadata?includeKey=executionStatus&includeKey=backendStatus" | jq .;
}

function timing() {
  open ${CROMWELL_URL}/api/workflows/v1/${1}/timing;
}

function abort() { 
  response=$(curl -X POST --header "Content-Type: application/json" --header "Accept: application/json" "${CROMWELL_URL}/api/workflows/v1/${1}/abort")
  echo $response  
}

if [ "$1" = "submit" ] ; then
   submit $2 $3 $4 $5
   exit
elif [ -z "$1" ] ; then
   instruct
   exit
fi

if [[ $2 == -* ]]; then
  row=${2#-}
  workflowID=$(tail -n $row $CROMWELL_DIARY_WORKFLOW_FILE | head -n 1)
else
  if [ -n "$2" ]; then workflowID=$2; else workflowID=$(cat ${CROMWELL_LAST_WORKFLOW_FILE} ); fi
fi
echo "using workflow-id == $workflowID" 1>&2
if [ "$1" = "status" ] ; then
   status $workflowID
elif [ "$1" = "logs" ] ; then
   logs $workflowID
elif [ "$1" = "metadata" ] ; then
   metadata $workflowID
elif [ "$1" = "executionStatusCount" ] ; then
   executionStatusCount $workflowID
elif [ "$1" = "slim_metadata" ] ; then
   slim_metadata $workflowID
elif [ "$1" = "timing" ] ; then
   timing $workflowID
elif [ "$1" = "abort" ] ; then
   abort $workflowID
else
    echo "$1 is not a valid operation"
    instruct exit
fi
